

def is_one_digit(v):
    return -10 < v < 10 and float.is_integer(v)


class HonestCalculator:

    def __init__(self):
        self.x, self.oper, self.y, self.memory = 0, "", 0, 0

    def main(self):
        self.x, self.oper, self.y = input("Enter an equation\n").split(" ")
        self.check_num()

    def check_num(self):
        try:
            self.x = float(self.x)
            self.y = float(self.y)
            self.check_oper()
        except ValueError:
            if self.x == 'M':
                self.x = self.memory
                self.y = float(self.y)
                self.check_oper()
            if self.y == 'M':
                self.y = float(self.memory)
                self.check_oper()
            else:
                print("Do you even know what numbers are? Stay focused!")
                self.main()

    def check_oper(self):
        if self.oper in ["+", "-", "*", "/"]:
            self.check()
        else:
            print("Yes ... an interesting math operation. You've slept through all classes, haven't you?")
            self.main()

    def check(self):
        msg = ""
        msg_6 = " ... lazy"
        msg_7 = " ... very lazy"
        msg_8 = " ... very, very lazy"
        msg_9 = "You are"
        if is_one_digit(self.x) and is_one_digit(self.y):
            msg = msg + msg_6
        if self.x == 1 or self.y == 1 and self.oper == "*":
            msg = msg + msg_7
        if self.x == 0 or self.y == 0 and self.oper in ["*", "+", "-"]:
            msg = msg + msg_8
        if msg != "":
            msg = msg_9 + msg
            print(msg)
            self.do_oper()
        else:
            self.do_oper()

    def do_oper(self):
        if self.oper == "+":
            result = self.x + self.y
            self.print_re(result)
            self.save_result(result)
        elif self.oper == "-":
            result = self.x - self.y
            self.print_re(result)
            self.save_result(result)
        elif self.oper == "*":
            result = self.x * self.y
            self.print_re(result)
            self.save_result(result)
        elif self.oper == "/" and self.y == 0:
            print("Yeah... division by zero. Smart move...")
            self.main()
        else:
            result = self.x / self.y
            self.print_re(result)
            self.save_result(result)

    def save_result(self, result):
        memory = input("Do you want to store the result? (y / n):")
        if memory == 'y':
            self.save_memory(result)
        elif memory == 'n':
            self.continue_calc()
        else:
            self.save_result(result)

    def continue_calc(self):
        answer = input("Do you want to continue calculations? (y / n):")
        if answer == 'y':
            self.main()
        elif answer == 'n':
            exit()
        else:
            self.continue_calc()

    def save_memory(self, result):
        if is_one_digit(result) is False:
            self.memory = result
            self.continue_calc()
        else:
            msg_index = 10
            self.memory_proc(msg_index, result)

    def memory_proc(self, msg_index, result):
        msg_ = {
            10: "Are you sure? It is only one digit! (y / n)",
            11: "Don't be silly! It's just one number! Add to the memory? (y / n)",
            12: "Last chance! Do you really want to embarrass yourself? (y / n)"}
        sure = input(msg_[msg_index])
        if sure == 'y':
            if msg_index < 12:
                msg_index += 1
                self.memory_proc(msg_index, result)
            else:
                self.memory = result
                self.continue_calc()
        elif sure == 'n':
            self.continue_calc()
        else:
            self.memory_proc(msg_index, result)

    @staticmethod
    def print_re(result):
        print(float(result))


if __name__ == "__main__":
    HonestCalculator().main()
    
